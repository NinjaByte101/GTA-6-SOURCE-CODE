Practical 1: Image Enhancement

import cv2
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg")
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(image_rgb)

enhanced = cv2.convertScaleAbs(image_rgb, alpha=1.2, beta=30)  # Brightness & Contrast
plt.subplot(1, 2, 2)
plt.title("Enhanced")
plt.imshow(enhanced)
plt.show()


Practical 2: Resizing Images

import cv2
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg")
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

resized = cv2.resize(image_rgb, (400, 300))

plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(image_rgb)

plt.subplot(1, 2, 2)
plt.title("Resized")
plt.imshow(resized)
plt.show()



Practical 3: Enhancing Colors

import cv2
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg")
image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

image_hsv[:, :, 1] = cv2.add(image_hsv[:, :, 1], 50)  # Increase saturation
enhanced = cv2.cvtColor(image_hsv, cv2.COLOR_HSV2BGR)

plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

plt.subplot(1, 2, 2)
plt.title("Enhanced Colors")
plt.imshow(cv2.cvtColor(enhanced, cv2.COLOR_BGR2RGB))
plt.show()


Practical 4: Geometric Transformations

import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg")
rows, cols = image.shape[:2]

# Translation
M = np.float32([[1, 0, 100], [0, 1, 50]])
translated = cv2.warpAffine(image, M, (cols, rows))

# Rotation
M = cv2.getRotationMatrix2D((cols/2, rows/2), 45, 1)
rotated = cv2.warpAffine(image, M, (cols, rows))

# Scaling
scaled = cv2.resize(image, None, fx=1.5, fy=1.5)

# Perspective Transformation
pts1 = np.float32([[50,50],[200,50],[50,200],[200,200]])
pts2 = np.float32([[10,100],[200,50],[100,250],[220,220]])
M = cv2.getPerspectiveTransform(pts1, pts2)
perspective = cv2.warpPerspective(image, M, (cols, rows))


Practical 5: Image Blurring

import cv2
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg")
blurred = cv2.GaussianBlur(image, (5, 5), 0)

plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

plt.subplot(1, 2, 2)
plt.title("Gaussian Blur")
plt.imshow(cv2.cvtColor(blurred, cv2.COLOR_BGR2RGB))
plt.show()



Practical 6: Edge Detection

import cv2
import matplotlib.pyplot as plt

image = cv2.imread("image.jpg", 0)

# Canny Edge Detection
edges_canny = cv2.Canny(image, 100, 200)

# Sobel Edge Detection
sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=5)
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=5)

plt.subplot(1, 3, 1)
plt.title("Canny")
plt.imshow(edges_canny, cmap='gray')

plt.subplot(1, 3, 2)
plt.title("Sobel X")
plt.imshow(sobel_x, cmap='gray')

plt.subplot(1, 3, 3)
plt.title("Sobel Y")
plt.imshow(sobel_y, cmap='gray')
plt.show()

