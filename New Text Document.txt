#IMAGE INHENCEMENT

import cv2
import matplotlib.pyplot as plt
import numpy as np

# Load the image
image = cv2.imread('GFG.jpeg')

#Plot the original image
plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(image)

# Adjust the brightness and contrast
# Adjusts the brightness by adding 10 to each pixel value
brightness = 10 
# Adjusts the contrast by scaling the pixel values by 2.3
contrast = 2.3  
image2 = cv2.addWeighted(image, contrast, np.zeros(image.shape, image.dtype), 0, brightness)

#Save the image
cv2.imwrite('modified_image.jpg', image2)
#Plot the contrast image
plt.subplot(1, 2, 2)
plt.title("Brightness & contrast")
plt.imshow(image2)
plt.show()


## SHARPENING IMAGES

import cv2
import matplotlib.pyplot as plt
import numpy as np

# Load the image
image = cv2.imread('GFG.jpeg')

#Plot the original image
plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(image)

# Create the sharpening kernel
kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])

# Sharpen the image
sharpened_image = cv2.filter2D(image, -1, kernel)

#Save the image
cv2.imwrite('sharpened_image.jpg', sharpened_image)

#Plot the sharpened image
plt.subplot(1, 2, 2)
plt.title("Sharpening")
plt.imshow(sharpened_image)
plt.show()


## ENHANCING COLOR IN IMAGES

import cv2
import matplotlib.pyplot as plt
import numpy as np

# Load the image
image = cv2.imread('GFG.jpeg')

#Plot the original image
plt.subplot(1, 2, 1)
plt.title("Original")
plt.imshow(image)

# Convert the image from BGR to HSV color space
image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

# Adjust the hue, saturation, and value of the image
# Adjusts the hue by multiplying it by 0.7
image[:, :, 0] = image[:, :, 0] * 0.7
# Adjusts the saturation by multiplying it by 1.5
image[:, :, 1] = image[:, :, 1] * 1.5
# Adjusts the value by multiplying it by 0.5
image[:, :, 2] = image[:, :, 2] * 0.5

# Convert the image back to BGR color space
image2 = cv2.cvtColor(image, cv2.COLOR_HSV2BGR)

#Save the image
cv2.imwrite('enhanced coloured.jpg', image2)

#Plot the enhanced image
plt.subplot(1, 2, 2)
plt.title("enhanced coloured")
plt.imshow(image2)
plt.show()




✅ 1. Import Required Libraries
import cv2
import numpy as np
________________________________________
📷 2. Read the Image
img = cv2.imread('your_image.jpg')
cv2.imshow('Original Image', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
🔀 3. Translation (Moving the image)
# Move image by 100px right and 50px down
rows, cols = img.shape[:2]
M = np.float32([[1, 0, 100], [0, 1, 50]])
translated_img = cv2.warpAffine(img, M, (cols, rows))

cv2.imshow('Translated Image', translated_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
🔄 4. Rotation
# Rotate by 45 degrees around the center
center = (cols // 2, rows // 2)
M = cv2.getRotationMatrix2D(center, 45, 1.0)
rotated_img = cv2.warpAffine(img, M, (cols, rows))

cv2.imshow('Rotated Image', rotated_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
🔍 5. Resizing
resized_img = cv2.resize(img, (300, 300), interpolation=cv2.INTER_LINEAR)

cv2.imshow('Resized Image', resized_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
↔️ 6. Flipping
# Flip vertically (0), horizontally (1), both (-1)
flipped_img = cv2.flip(img, 1)

cv2.imshow('Flipped Image', flipped_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
🧭 7. Affine Transformation
pts1 = np.float32([[50, 50], [200, 50], [50, 200]])
pts2 = np.float32([[10, 100], [200, 50], [100, 250]])
M = cv2.getAffineTransform(pts1, pts2)
affine_img = cv2.warpAffine(img, M, (cols, rows))

cv2.imshow('Affine Transform', affine_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
🔳 8. Perspective Transformation
pts1 = np.float32([[56,65], [368,52], [28,387], [389,390]])
pts2 = np.float32([[0,0], [300,0], [0,300], [300,300]])
M = cv2.getPerspectiveTransform(pts1, pts2)
perspective_img = cv2.warpPerspective(img, M, (300, 300))

cv2.imshow('Perspective Transform', perspective_img)
cv2.waitKey(0)
cv2.destroyAllWindows()



________________________________________
✅ Code to Rotate an Image
import cv2
import numpy as np

# Load the image
image = cv2.imread('your_image.jpg')

# Get the image dimensions
(h, w) = image.shape[:2]

# Define the center of the image (around which rotation happens)
center = (w // 2, h // 2)

# Define the angle of rotation (positive = counterclockwise)
angle = 45  # rotate by 45 degrees

# Define the scale of the image
scale = 1.0  # keep original size

# Get the rotation matrix
rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale)

# Perform the rotation using warpAffine
rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h))

# Display the rotated image
cv2.imshow('Rotated Image', rotated_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________



## Image Resizing-


✅ Example Code:
import cv2

# Load the original image
image = cv2.imread('example.jpg')

# Resize to a specific width and height
resized = cv2.resize(image, (300, 200))  # width=300, height=200

# Resize by scale (e.g., half the size)
resized_half = cv2.resize(image, (0, 0), fx=0.5, fy=0.5)

# Show images
cv2.imshow('Original', image)
cv2.imshow('Resized (300x200)', resized)
cv2.imshow('Resized Half', resized_half)

cv2.waitKey(0)
cv2.destroyAllWindows()




-->	Gaussian Blur Example-

import cv2
import numpy as np

# Load the image
image = cv2.imread('your_image.jpg')

# Check if image loaded successfully
if image is None:
    print("Error: Could not load image.")
else:
    # Apply Gaussian blurring with a 5x5 kernel and sigmaX=0 (auto-calculated)
    blurred_gaussian = cv2.GaussianBlur(image, (5, 5), 0)

    # Display the original and blurred images
    cv2.imshow('Original Image', image)
    cv2.imshow('Gaussian Blurred Image', blurred_gaussian)
    cv2.waitKey(0)
    cv2.destroyAllWindows()




✅ Example Code: Circle Detection using OpenCV
import cv2
import numpy as np

# Load image
image = cv2.imread('circles.png')  # Replace with your image path
output = image.copy()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur to reduce noise
gray_blurred = cv2.GaussianBlur(gray, (9, 9), 2)

# Detect circles using HoughCircles
circles = cv2.HoughCircles(gray_blurred,
                           cv2.HOUGH_GRADIENT,
                           dp=1.2,
                           minDist=20,
                           param1=50,
                           param2=30,
                           minRadius=0,
                           maxRadius=0)

# If some circles are detected, draw them
if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        # Draw the outer circle
        cv2.circle(output, (i[0], i[1]), i[2], (0, 255, 0), 2)
        # Draw the center of the circle
        cv2.circle(output, (i[0], i[1]), 2, (0, 0, 255), 3)

# Show results
cv2.imshow('Detected Circles', output)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________


✅ Example Code: Circle Detection using OpenCV
import cv2
import numpy as np

# Load image
image = cv2.imread('circles.png')  # Replace with your image path
output = image.copy()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur to reduce noise
gray_blurred = cv2.GaussianBlur(gray, (9, 9), 2)

# Detect circles using HoughCircles
circles = cv2.HoughCircles(gray_blurred,
                           cv2.HOUGH_GRADIENT,
                           dp=1.2,
                           minDist=20,
                           param1=50,
                           param2=30,
                           minRadius=0,
                           maxRadius=0)

# If some circles are detected, draw them
if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        # Draw the outer circle
        cv2.circle(output, (i[0], i[1]), i[2], (0, 255, 0), 2)
        # Draw the center of the circle
        cv2.circle(output, (i[0], i[1]), 2, (0, 0, 255), 3)

# Show results
cv2.imshow('Detected Circles', output)
cv2.waitKey(0)
cv2.destroyAllWindows()
________________________________________
